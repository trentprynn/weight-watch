// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId             String              @id @default(cuid())
  email              String              @unique
  passwordHash       String
  name               String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  refreshTokens      RefreshToken[]
  weightActivityLogs WeightActivityLog[]
  activities         Activity[]
  activityLogs       ActivityLog[]
}

model RefreshToken {
  refreshTokenHash String
  expiration       DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           String
  user             User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([refreshTokenHash, userId])
}

model WeightActivityLog {
  weightActivityLogId String   @id @default(cuid())
  weight              Float
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  userId              String
  user                User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Activity {
  activityId   String        @id @default(cuid())
  name         String
  iconName     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  user         User          @relation(fields: [userId], references: [userId], onDelete: Cascade)
  activityLogs ActivityLog[]
}

model ActivityLog {
  activityLogId   String   @id @default(cuid())
  activityDate    DateTime
  lengthInSeconds Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  activityId      String
  activity        Activity @relation(fields: [activityId], references: [activityId], onDelete: Cascade)
  userId          String
  user            User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}
